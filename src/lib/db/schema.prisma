generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model InferenceEndpoint {
  id             String  @id @default(cuid())
  name           String
  platform       String // AZURE_OPENAI, OPENAI, AWS_BEDROCK, OLLAMA, CUSTOM, ...
  region         String? // eastus, eastus2, westeurope, ..., mydc1, mydc2, ... localhost, ...
  endpoint       String
  key            String? /// @encrypted
  modelName      String? @map("model_name")
  modelVersion   String? @map("model_version")
  deploymentName String? @map("deployment_name") // Azure deployment name/deployment id

  status       String // ACTIVE, ERROR, THROTTLING, ...
  retryAfter   DateTime? @map("retry_after")
  errorMessage String?   @map("error_message")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  gateways                 GatewayInferenceEndpoint[]
  InferenceEndpointRequest InferenceEndpointRequest[]

  @@index([status], type: Hash)
  @@map("inference_endpoints")
}

model GatewayInferenceEndpoint {
  id    String @id @default(cuid())
  order Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  inferenceEndpoint   InferenceEndpoint @relation(fields: [inferenceEndpointId], references: [id], onDelete: Cascade)
  inferenceEndpointId String            @map("inference_endpoint_id")
  gateway             Gateway           @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  gatewayId           String            @map("gateway_id")

  @@map("gateway_inference_endpoints")
}

model Gateway {
  id           String  @id @default(cuid())
  name         String
  traceTraffic Boolean @default(false) @map("trace_traffic")
  tracePayload Boolean @default(false) @map("trace_payload")
  logTraffic   Boolean @default(false) @map("log_traffic")
  logPayload   Boolean @default(false) @map("log_payload")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  gatewayKeys        GatewayKey[]
  inferenceEndpoints GatewayInferenceEndpoint[]
  gatewayRequests    GatewayRequest[]

  @@map("gateways")
}

model GatewayKey {
  id        String @id @default(cuid())
  name      String
  keyHash   String @unique @map("key_hash")
  maskedKey String @map("masked_key")
  status    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  gateway         Gateway          @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  gatewayId       String           @map("gateway_id")
  gatewayRequests GatewayRequest[]

  @@index([keyHash])
  @@index([status])
  @@index([gatewayId])
  @@map("gateway_keys")
}

model GatewayRequest {
  id          String  @id @default(cuid())
  ip          String
  url         String
  body        String?
  contentType String? @map("content_type")
  requestId   String  @map("request_id")

  topP        Float?   @map("top_p")
  tools       Boolean?
  seed        Int?
  stream      Boolean?
  temperature Float?
  maxTokens   Int?     @map("max_tokens")

  createdAt DateTime @default(now()) @map("created_at")

  gateway                   Gateway                    @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  gatewayId                 String                     @map("gateway_id")
  gatewayKey                GatewayKey?                @relation(fields: [gatewayKeyId], references: [id], onDelete: Restrict)
  gatewayKeyId              String?                    @map("gateway_key_id")
  inferenceEndpointRequests InferenceEndpointRequest[]
  gatewayResponse           GatewayResponse?

  @@index([requestId])
  @@index([createdAt(sort: Desc)])
  @@index([gatewayId])
  @@index([gatewayKeyId])
  @@map("gateway_requests")
}

model GatewayResponse {
  id         String  @id @default(cuid())
  duration   Float
  statusCode Int     @map("status_code")
  headers    Json
  body       String?

  createdAt DateTime @default(now()) @map("created_at")

  gatewayRequest   GatewayRequest @relation(fields: [gatewayRequestId], references: [id], onDelete: Cascade)
  gatewayRequestId String         @unique @map("gateway_request_id")

  inferenceEndpointResponse   InferenceEndpointResponse? @relation(fields: [inferenceEndpointResponseId], references: [id], onDelete: Cascade)
  inferenceEndpointResponseId String?                    @unique @map("inference_endpoint_response_id")

  @@index([statusCode])
  @@index([gatewayRequestId])
  @@index([inferenceEndpointResponseId])
  @@map("gateway_responses")
}

model InferenceEndpointRequest {
  id     String  @id @default(cuid())
  url    String
  method String
  body   String?

  createdAt DateTime @default(now()) @map("created_at")

  gatewayRequest            GatewayRequest             @relation(fields: [gatewayRequestId], references: [id], onDelete: Cascade)
  gatewayRequestId          String                     @map("gateway_request_id")
  inferenceEndpoint         InferenceEndpoint          @relation(fields: [inferenceEndpointId], references: [id], onDelete: Cascade)
  inferenceEndpointId       String                     @map("inference_endpoint_id")
  inferenceEndpointResponse InferenceEndpointResponse?

  @@index([gatewayRequestId])
  @@index([inferenceEndpointId])
  @@map("inference_endpoint_requests")
}

model InferenceEndpointResponse {
  id                String  @id @default(cuid())
  statusCode        Int     @map("status_code")
  duration          Float
  headers           Json
  body              String?
  choices           Int?
  systemFingerprint String? @map("system_fingerprint")
  promptTokens      Int?    @map("prompt_tokens")
  completionTokens  Int?    @map("completion_tokens")

  createdAt DateTime @default(now()) @map("created_at")

  inferenceEndpointRequest   InferenceEndpointRequest @relation(fields: [inferenceEndpointRequestId], references: [id], onDelete: Cascade)
  inferenceEndpointRequestId String                   @unique @map("inference_endpoint_request_id")
  gatewayResponse            GatewayResponse?

  @@index([inferenceEndpointRequestId])
  @@map("inference_endpoint_responses")
}
