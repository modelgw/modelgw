generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model InferenceEndpoint {
  id             String  @id @default(cuid())
  name           String
  platform       String // AZURE_OPENAI, OPENAI, AWS_BEDROCK, OLLAMA, CUSTOM, ...
  region         String? // eastus, eastus2, westeurope, ..., mydc1, mydc2, ... localhost, ...
  endpoint       String
  key            String? /// @encrypted
  modelName      String? @map("model_name")
  modelVersion   String? @map("model_version")
  deploymentName String? @map("deployment_name") // Azure deployment name/deployment id

  status       String // ACTIVE, ERROR, THROTTLING, ...
  retryAfter   DateTime? @map("retry_after")
  errorMessage String?   @map("error_message")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  gateways GatewayInferenceEndpoint[]

  @@index([status], type: Hash)
  @@map("inference_endpoints")
}

model GatewayInferenceEndpoint {
  id    String @id @default(cuid())
  order Int

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  inferenceEndpoint   InferenceEndpoint @relation(fields: [inferenceEndpointId], references: [id], onDelete: Cascade)
  inferenceEndpointId String            @map("inference_endpoint_id")
  gateway             Gateway           @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  gatewayId           String            @map("gateway_id")

  @@map("gateway_inference_endpoints")
}

model Gateway {
  id   String @id @default(cuid())
  name String
  logTraffic Boolean @default(false) @map("log_traffic")
  logPayload Boolean @default(false) @map("log_payload")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  gatewayKeys        GatewayKey[]
  inferenceEndpoints GatewayInferenceEndpoint[]

  @@map("gateways")
}

model GatewayKey {
  id        String @id @default(cuid())
  name      String
  keyHash   String @unique @map("key_hash")
  maskedKey String @map("masked_key")
  status    String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  gateway   Gateway @relation(fields: [gatewayId], references: [id], onDelete: Cascade)
  gatewayId String  @map("gateway_id")

  @@index([keyHash])
  @@index([status])
  @@index([gatewayId])
  @@map("gateway_keys")
}
