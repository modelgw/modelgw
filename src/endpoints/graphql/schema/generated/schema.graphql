schema {
  query: Query
  mutation: Mutation
}

input AddGatewayKeyInput {
  gatewayId: ID!
  name: String!
}

type AddGatewayKeyPayload {
  gatewayKey: GatewayKey
  key: String
}

type AzureModelDeployment {
  accountEndpoint: String!
  accountLocation: String!
  accountName: String!
  id: ID!
  modelDeploymentModelName: String!
  modelDeploymentModelVersion: String!
  modelDeploymentName: String!
  resourceGroupName: String!
  subscriptionId: String!
}

input CreateGatewayInput {
  name: String!
}

type CreateGatewayPayload {
  gateway: Gateway
}

input CreateInferenceEndpointInput {
  deploymentName: String
  endpoint: String!
  key: String
  modelName: String
  modelVersion: String
  name: String!
  platform: String!
  region: String
}

type CreateInferenceEndpointPayload {
  inferenceEndpoint: InferenceEndpoint
}

type Gateway implements Node {
  createdAt: String!
  id: ID!
  inferenceEndpoints(
    after: String
    before: String
    first: Int
    last: Int
  ): GatewayInferenceEndpointConnection
  keys(
    after: String
    before: String
    first: Int
    last: Int
  ): GatewayKeyConnection
  logPayload: Boolean!
  logTraffic: Boolean!
  name: String!
  status: String!
  tracePayload: Boolean!
  traceTraffic: Boolean!
  updatedAt: String!
}

type GatewayConnection {
  edges: [GatewayEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type GatewayEdge {
  cursor: String!
  node: Gateway
}

type GatewayInferenceEndpointConnection {
  edges: [GatewayInferenceEndpointEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type GatewayInferenceEndpointEdge {
  cursor: String!
  node: InferenceEndpoint
  order: Int!
}

type GatewayKey implements Node {
  createdAt: String!
  id: ID!
  maskedKey: String!
  name: String!
  status: String!
  updatedAt: String!
}

type GatewayKeyConnection {
  edges: [GatewayKeyEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type GatewayKeyEdge {
  cursor: String!
  node: GatewayKey
}

input ImportAzureModelDeploymentInput {
  inferenceEndpointName: String
  modelDeploymentId: String!
}

input ImportAzureModelDeploymentsInput {
  modelDeployments: [ImportAzureModelDeploymentInput!]!
}

type ImportAzureModelDeploymentsPayload {
  inferenceEndpoints: [InferenceEndpoint!]!
}

type InferenceEndpoint implements Node {
  createdAt: String!
  deploymentName: String
  endpoint: String!
  id: ID!
  modelName: String
  modelVersion: String
  name: String!
  platform: String!
  region: String
  status: String!
  updatedAt: String!
}

type InferenceEndpointConnection {
  edges: [InferenceEndpointEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type InferenceEndpointEdge {
  cursor: String!
  node: InferenceEndpoint
}

input LoginInput {
  email: String!
  password: String!
}

type LoginPayload {
  token: String
}

type Mutation {
  _empty: String
  addGatewayKey(input: AddGatewayKeyInput!): AddGatewayKeyPayload
  createGateway(input: CreateGatewayInput!): CreateGatewayPayload
  createInferenceEndpoint(
    input: CreateInferenceEndpointInput!
  ): CreateInferenceEndpointPayload
  importAzureModelDeployments(
    input: ImportAzureModelDeploymentsInput!
  ): ImportAzureModelDeploymentsPayload
  login(input: LoginInput!): LoginPayload
  logout: Boolean
  revokeGatewayKey(input: RevokeGatewayKeyInput!): RevokeGatewayKeyPayload
  updateGateway(input: UpdateGatewayInput!): UpdateGatewayPayload
  updateInferenceEndpoint(
    input: UpdateInferenceEndpointInput!
  ): UpdateInferenceEndpointPayload
}

interface Node {
  id: ID!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  azureModelDeployments: [AzureModelDeployment!]!
  gateways(
    after: String
    before: String
    first: Int
    last: Int
  ): GatewayConnection
  inferenceEndpoints(
    after: String
    before: String
    first: Int
    last: Int
  ): InferenceEndpointConnection
  node(id: ID!): Node
  viewer: Viewer
}

input RevokeGatewayKeyInput {
  gatewayKeyId: ID!
}

type RevokeGatewayKeyPayload {
  gatewayKey: GatewayKey
}

input UpdateGatewayInput {
  gatewayId: ID!
  inferenceEndpointIds: [ID!]!
  logPayload: Boolean!
  logTraffic: Boolean!
  name: String!
  tracePayload: Boolean!
  traceTraffic: Boolean!
}

type UpdateGatewayPayload {
  gateway: Gateway
}

input UpdateInferenceEndpointInput {
  deploymentName: String
  endpoint: String
  inferenceEndpointId: ID!
  key: String
  modelName: String
  modelVersion: String
  name: String!
  platform: String!
  region: String
}

type UpdateInferenceEndpointPayload {
  inferenceEndpoint: InferenceEndpoint
}

type Viewer {
  email: String!
  id: ID!
}
